
import simplegui
import random

WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0, 0]
paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
paddle2_pos = [(WIDTH - HALF_PAD_WIDTH), HEIGHT / 2]
paddle1_vel = [0, 0]
paddle2_vel = [0, 0]
score1 = 0
score2 = 0


def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [2, 2]
    if direction == RIGHT:
        ball_vel = [random.randrange(120, 240)/60, random.randrange(-180, -60)/60]
    elif direction == LEFT:
        ball_vel = [random.randrange(-240, -120)/60,random.randrange(-180, -60)/60]


def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(RIGHT)

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
 
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collide with left paddle
    if ball_pos[0] <= BALL_RADIUS + PAD_WIDTH and ball_pos[1] < paddle1_pos[1] + HALF_PAD_HEIGHT and ball_pos[1] > paddle1_pos[1] - HALF_PAD_HEIGHT:
        ball_vel[0] = -ball_vel[0]
        ball_vel[0] += (ball_vel[0] * .1)
        ball_vel[1] += (ball_vel[1] * .1)
        
    elif ball_pos[0] >= (WIDTH - 1) - BALL_RADIUS - PAD_WIDTH and ball_pos[1] < paddle2_pos[1] + HALF_PAD_HEIGHT and ball_pos[1] > paddle2_pos[1] - HALF_PAD_HEIGHT:
        ball_vel[0] = -ball_vel[0]
        ball_vel[0] += (ball_vel[0] * .1)
        ball_vel[1] += (ball_vel[1] * .1)
    
    elif ball_pos[0] <= BALL_RADIUS + PAD_WIDTH:
        score2 += 1
        spawn_ball(RIGHT)
        #ball_vel[0] = -ball_vel[0]
        
    elif ball_pos[0] >= (WIDTH - 1) - BALL_RADIUS - PAD_WIDTH:
        score1 += 1
        spawn_ball(LEFT)
        #ball_vel[0] = -ball_vel[0]
    
    elif ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
        
    elif ball_pos[1] >= (HEIGHT - 1) - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
        
        
    c.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    
    
    if (paddle1_pos[1] - HALF_PAD_HEIGHT) > 0 and (paddle1_pos[1] + HALF_PAD_HEIGHT) < HEIGHT:
        paddle1_pos[1] += paddle1_vel[1]
    else:
        if (paddle1_pos[1] - HALF_PAD_HEIGHT) <= 0 and paddle1_vel[1] >= 0:
            paddle1_pos[1] += paddle1_vel[1]
        elif (paddle1_pos[1] + HALF_PAD_HEIGHT) >= HEIGHT and paddle1_vel[1] < 0:
            paddle1_pos[1] += paddle1_vel[1]
        else:
            paddle1_vel[1] = 0
       
    if (paddle2_pos[1] - HALF_PAD_HEIGHT) > 0 and (paddle2_pos[1] + HALF_PAD_HEIGHT) < HEIGHT:
        paddle2_pos[1] += paddle2_vel[1]
    else:
        if (paddle2_pos[1] - HALF_PAD_HEIGHT) <= 0 and paddle2_vel[1] >= 0:
            paddle2_pos[1] += paddle2_vel[1]
        elif (paddle2_pos[1] + HALF_PAD_HEIGHT) >= HEIGHT and paddle2_vel[1] < 0:
            paddle2_pos[1] += paddle2_vel[1]
        else:
            paddle2_vel[1] = 0
    
    c.draw_line([paddle1_pos[0], paddle1_pos[1] + HALF_PAD_HEIGHT], [paddle1_pos[0], paddle1_pos[1] - HALF_PAD_HEIGHT], PAD_WIDTH, "White")
    c.draw_line([paddle2_pos[0], paddle2_pos[1] + HALF_PAD_HEIGHT], [paddle2_pos[0], paddle2_pos[1] - HALF_PAD_HEIGHT], PAD_WIDTH, "White")
    
    c.draw_text(str(score1), [(WIDTH / 2) - 35, 30], 40, "White")
    c.draw_text(str(score2), [(WIDTH / 2) + 15, 30], 40, "White")
    
    if score1 == 7 or score2 == 7:
        ball_pos = [WIDTH/2, HEIGHT/2]
        ball_vel = [0, 0]
        if score1 > score2:
            c.draw_text("Player 1 Wins", [(WIDTH / 2) - 100, (HEIGHT/2) - 50], 40, "Red")
        else:
            c.draw_text("Player 2 Wins", [(WIDTH / 2) - 100, (HEIGHT/2) - 50], 40, "Red")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 3
    if key == simplegui.KEY_MAP["s"]:
       paddle1_vel[1] += acc
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel[1] -= acc
    elif key == simplegui.KEY_MAP["down"]:
       paddle2_vel[1] += acc
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel[1] -= acc
   
def keyup(key):
    global paddle1_vel, paddle2_vel 
    if key == simplegui.KEY_MAP["s"] or key == simplegui.KEY_MAP["w"]: 
        paddle1_vel = [0, 0]
    elif key == simplegui.KEY_MAP["down"] or key == simplegui.KEY_MAP["up"]:
        paddle2_vel = [0, 0]
        
def button_handler():
    new_game()

frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button("Restart", button_handler)


new_game()
frame.start()
